#autogenerated by sqlautocode

from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
import sqlalchemy.engine
from application import service_application
import db.models.app
from sqlalchemy.orm import relation, backref

if not service_application.is_initialized():
    print "Application is not initialized."
    quit()

DeclarativeBase = declarative_base()
metadata = DeclarativeBase.metadata
metadata.bind = service_application.get_injector().get(sqlalchemy.engine.Engine)

sport_club = Table(u'sport_club', metadata,
    Column(u'id', INTEGER(), primary_key=True, nullable=False),
    Column(u'magazine_id', INTEGER(), nullable=False),
    Column(u'name', VARCHAR(length=255), nullable=False),
    Column(u'url', VARCHAR(length=255), nullable=False),
    Column(u'regexp', TEXT()),
    Column(u'added', DATETIME(), nullable=False),
    Column(u'created', DATETIME()),
    Column(u'flag_created_year', INTEGER(length=1), nullable=False),
    Column(u'sport_id', INTEGER(), ForeignKey('sport.id')),
    Column(u'stadium', VARCHAR(length=255), nullable=False),
    Column(u'president', VARCHAR(length=255), nullable=False),
    Column(u'coach', VARCHAR(length=255), nullable=False),
    Column(u'league', VARCHAR(length=255), nullable=False),
    Column(u'state_id', INTEGER(), ForeignKey('state.id')),
    Column(u'city', VARCHAR(length=255), nullable=False),
    Column(u'achievements', TEXT()),
    Column(u'homepage', VARCHAR(length=255), nullable=False),
    Column(u'active', INTEGER(length=1), nullable=False),
    Column(u'current_squad', INTEGER(length=1), nullable=False),
)

class Sport(DeclarativeBase):
    __tablename__ = 'sport'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    name = Column(u'name', VARCHAR(length=255), nullable=False)

    #relation definitions
    states = relation('State', primaryjoin='Sport.id==SportClub.sport_id', secondary=sport_club, secondaryjoin='SportClub.state_id==State.id')

    def get_app_model(self):
        return db.models.app.Sport(self.__dict__)


class SportClub(DeclarativeBase):
    __table__ = sport_club


    #relation definitions
    sport = relation('Sport', primaryjoin='SportClub.sport_id==Sport.id')
    state = relation('State', primaryjoin='SportClub.state_id==State.id')

    def get_app_model(self):
        m = db.models.app.SportClub(self.__dict__)
        if self.created != None:
            m.created = '{0.day:{1}}. {0.month:{1}}. {0.year}'.format(self.created, '02');
        return m

    def update_url(self):
        self.url = "/sportove-kluby/{0}/{1}".format(self.id, self.name)

class SportClubField(DeclarativeBase):
    __tablename__ = 'sport_club_field'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    name = Column(u'name', VARCHAR(length=256), nullable=False)
    sport_club_id = Column(u'sport_club_id', INTEGER(), ForeignKey('sport_club.id'), nullable=False)
    value = Column(u'value', VARCHAR(length=256), nullable=False)

    #relation definitions
    sport_club = relation('SportClub', primaryjoin='SportClubField.sport_club_id==SportClub.id')


class State(DeclarativeBase):
    __tablename__ = 'state'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    name_en = Column(u'name_en', VARCHAR(length=64), nullable=False)
    name_sk = Column(u'name_sk', VARCHAR(length=64), nullable=False)

    #relation definitions
    sports = relation('Sport', primaryjoin='State.id==SportClub.state_id', secondary=sport_club, secondaryjoin='SportClub.sport_id==Sport.id')

    def get_app_model(self):
        return db.models.app.State(self.__dict__)


