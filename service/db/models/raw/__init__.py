#autogenerated by sqlautocode

from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
import sqlalchemy.engine
from application import service_application
import db.models.app
from sqlalchemy.orm import relation, backref, relationship
from sqlalchemy.dialects.mysql.base import BIT
from db.models.raw.model_helper import ModelHelper
from utils import url_helper

DeclarativeBase = declarative_base()
metadata = DeclarativeBase.metadata
metadata.bind = service_application.get_injector().get(sqlalchemy.engine.Engine)

class ModelBase:
    def update(self, app_model, forbidden_keys = [], inverse = False):
        ModelHelper.update_model(self, app_model, forbidden_keys, inverse)

sport_club = Table(u'sport_club', metadata,
    Column(u'id', INTEGER(), primary_key=True, nullable=False),
    Column(u'magazine_id', INTEGER()),
    Column(u'name', VARCHAR(length=255), nullable=False),
    Column(u'url', VARCHAR(length=255), nullable=False),
    Column(u'regexp', TEXT()),
    Column(u'added', DATETIME(), nullable=False),
    Column(u'created', DATETIME()),
    Column(u'flag_created_year', BIT(length=1), nullable=False),
    Column(u'sport_id', INTEGER(), ForeignKey('sport.id')),
    Column(u'stadium', VARCHAR(length=255), nullable=False),
    Column(u'president', VARCHAR(length=255), nullable=False),
    Column(u'coach', VARCHAR(length=255), nullable=False),
    Column(u'league', VARCHAR(length=255), nullable=False),
    Column(u'state_id', INTEGER(), ForeignKey('state.id')),
    Column(u'city', VARCHAR(length=255), nullable=False),
    Column(u'achievements', TEXT()),
    Column(u'homepage', VARCHAR(length=255), nullable=False),
    Column(u'active', BIT(length=1), nullable=False),
    Column(u'current_squad', BIT(length=1), nullable=False),
    Column(u'top', BIT(length=1), nullable=False),
    Column(u'image_id', INTEGER(), ForeignKey('image.iid')),
    Column(u'gallery_id', INTEGER(), ForeignKey('gallery.gid')),
)

gallery_image = Table(u'gallery_image', metadata,
    Column(u'gid', INTEGER(), ForeignKey('gallery.gid'), primary_key=True, nullable=False),
    Column(u'iid', INTEGER(), ForeignKey('image.iid'), primary_key=True, nullable=False),
    Column(u'description', VARCHAR(length=1000)),
    Column(u'order', INTEGER(), nullable=False),
)

class Gallery(DeclarativeBase, ModelBase):
    __tablename__ = 'gallery'

    __table_args__ = {}

    #column definitions
    aid = Column(u'aid', INTEGER(), ForeignKey('article.aid'))
    created = Column(u'created', TIMESTAMP(), nullable=False)
    gid = Column(u'gid', INTEGER(), primary_key=True, nullable=False)
    images_count = Column(u'images_count', SMALLINT(), nullable=False)
    name = Column(u'name', VARCHAR(length=255), nullable=False)

    #relation definitions
    images = relation('Image', primaryjoin='Gallery.gid==GalleryImage.gid', secondary=gallery_image, secondaryjoin='GalleryImage.iid==Image.iid')


class GalleryImage(DeclarativeBase, ModelBase):
    __table__ = gallery_image


    #relation definitions
    image = relation('Image', primaryjoin='GalleryImage.iid==Image.iid')
    gallery = relation('Gallery', primaryjoin='GalleryImage.gid==Gallery.gid')


class Image(DeclarativeBase, ModelBase):
    __tablename__ = 'image'

    __table_args__ = {}

    #column definitions
    big = Column(u'big', Integer(), nullable=False)
    created = Column(u'created', TIMESTAMP(), nullable=False)
    description = Column(u'description', VARCHAR(length=1000))
    extension = Column(u'extension', VARCHAR(length=20))
    height = Column(u'height', INTEGER())
    iid = Column(u'iid', INTEGER(), primary_key=True, nullable=False)
    rid = Column(u'rid', INTEGER(), ForeignKey('resource.rid'))
    watermark = Column(u'watermark', Enum(u'none', u'light', u'dark'), nullable=False)
    width = Column(u'width', INTEGER())

    #relation definitions
    resource = relation('Resource', primaryjoin='Image.rid==Resource.rid')
    galleries = relation('Gallery', primaryjoin='Image.iid==GalleryImage.iid', secondary=gallery_image, secondaryjoin='GalleryImage.gid==Gallery.gid')

    def get_url(self, dim):
        return url_helper.image(self, dim)

    def get_app_model(self):
        return db.models.app.Image(self.__dict__)

class Resource(DeclarativeBase):
    __tablename__ = 'resource'

    __table_args__ = {}

    #column definitions
    contact = Column(u'contact', VARCHAR(length=255))
    homepage = Column(u'homepage', VARCHAR(length=255))
    name = Column(u'name', VARCHAR(length=255), nullable=False)
    rid = Column(u'rid', INTEGER(), primary_key=True, nullable=False)
    type = Column(u'type', String(length=1), nullable=False)

    #relation definitions


class Sport(DeclarativeBase, ModelBase):
    __tablename__ = 'sport'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    name = Column(u'name', VARCHAR(length=255), nullable=False)

    #relation definitions
    states = relation('State', primaryjoin='Sport.id==SportClub.sport_id', secondary=sport_club, secondaryjoin='SportClub.state_id==State.id')

    def get_app_model(self):
        return db.models.app.Sport(self.__dict__)

class SportClub(DeclarativeBase, ModelBase):
    __table__ = sport_club


    #relation definitions
    sport = relation('Sport', primaryjoin='SportClub.sport_id==Sport.id')
    state = relation('State', primaryjoin='SportClub.state_id==State.id')
    sport_club_fields = relationship("SportClubField", order_by="SportClubField.id", backref="sport_club")
    image = relation('Image', primaryjoin='SportClub.image_id==Image.iid')
    gallery = relation('Gallery', primaryjoin='SportClub.gallery_id==Gallery.gid')

    def get_app_model(self):
        m = db.models.app.SportClub(self.__dict__)
        if self.created != None:
            m.created = '{0.day:{1}}. {0.month:{1}}. {0.year}'.format(self.created, '02');
        else:
            m.presentation_created = None

        if self.created != None and self.flag_created_year:
            m.presentation_created = '{0.year}'.format(self.created)
        else:
            m.presentation_created = m.created

        m.sport_club_fields = []
        if self.sport_club_fields != None:
            for scf in self.sport_club_fields:
                m.sport_club_fields.append(scf.get_app_model())

        if self.image != None:
            m.image = self.image.get_app_model()

        return m

    def update_url(self):
        self.url = url_helper.club(self)

class SportClubField(DeclarativeBase, ModelBase):
    __tablename__ = 'sport_club_field'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    name = Column(u'name', VARCHAR(length=256), nullable=False)
    sport_club_id = Column(u'sport_club_id', INTEGER(), ForeignKey('sport_club.id'), nullable=False)
    value = Column(u'value', VARCHAR(length=256), nullable=False)

    #relation definitions
    #sport_club = relation('SportClub', primaryjoin='SportClubField.sport_club_id==SportClub.id')

    def get_app_model(self):
        return db.models.app.SportClubField(self.__dict__)

class State(DeclarativeBase, ModelBase):
    __tablename__ = 'state'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    name_en = Column(u'name_en', VARCHAR(length=64), nullable=False)
    name_sk = Column(u'name_sk', VARCHAR(length=64), nullable=False)

    #relation definitions
    sports = relation('Sport', primaryjoin='State.id==SportClub.state_id', secondary=sport_club, secondaryjoin='SportClub.sport_id==Sport.id')


    def get_app_model(self):
        return db.models.app.State(self.__dict__)

class VideoDaily(DeclarativeBase):
    __tablename__ = 'video_daily'

    __table_args__ = {}

    #column definitions
    created = Column(u'created', TIMESTAMP(), nullable=False)
    description = Column(u'description', VARCHAR(length=1000), nullable=False)
    embedded_code = Column(u'embedded_code', TEXT(), nullable=False)
    name = Column(u'name', VARCHAR(length=255), nullable=False)
    vdid = Column(u'vdid', INTEGER(), primary_key=True, nullable=False)
    date = Column(u'date', DATE(), nullable=False)
    magazine_id = Column(u'magazine_id', INTEGER(), nullable=False)

    #relation definitions


    def get_app_model(self):
        m = db.models.app.VideoDaily(self.__dict__)

        if self.created != None:
            m.created = '{0.day:{1}}. {0.month:{1}}. {0.year} {0.hour:{1}}:{0.minute:{1}}:{0.second:{1}}'.format(self.created, '02');
        
        if self.date != None:
            m.date = '{0.day:{1}}. {0.month:{1}}. {0.year}'.format(self.date,'02')
        
        return m

